# Generated by Django 5.0.4 on 2024-05-01 00:38

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('base', '0003_remove_anonymoususer_completed_quiz_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AnonymousUser',
            fields=[
                ('anonymous_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('xp', models.PositiveIntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_type', models.TextField(choices=[('true_or_false', 'TRUE_OR_FALSE'), ('objective', 'OBJECTIVE'), ('open_ended', 'OPEN_ENDED'), ('multiple_choices', 'MULTIPLE_CHOICES')], default='objective')),
                ('true_or_false', models.BooleanField(default=False)),
                ('answer', models.TextField(blank=True, max_length=255, null=True)),
                ('is_compulsory', models.BooleanField(default=False)),
                ('question_point', models.PositiveIntegerField(default=5)),
                ('correct_answer_explanation', models.CharField(max_length=300)),
                ('incorrect_answer_penalty', models.PositiveIntegerField(default=5)),
                ('hint', models.TextField(blank=True, default='No available hint.', max_length=250, null=True)),
                ('question_number', models.PositiveIntegerField(default=1)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('question_body', models.TextField(default=None, max_length=400)),
                ('question_image', models.URLField(blank=True, null=True)),
                ('mistakes_to_ignore', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='OpenEndedOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_strict', models.BooleanField(default=False)),
                ('mistakes_to_ignore', models.IntegerField(default=1)),
                ('question', models.ForeignKey(db_column='belongs_to_id', default=None, on_delete=django.db.models.deletion.CASCADE, to='quiz.question')),
            ],
        ),
        migrations.CreateModel(
            name='MultipleChoiceOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(blank=True, max_length=200, null=True)),
                ('is_correct_answer', models.BooleanField(default=False)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.question')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('access_with_key', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('descriptions', models.TextField(default='Nothing to see', max_length=2000)),
                ('difficulty', models.TextField(choices=[('easy', 'EASY'), ('medium', 'MEDIUM'), ('hard', 'HARD')], default='medium', max_length=10)),
                ('time_limit', models.PositiveIntegerField(default=0)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('requirements', models.TextField(default='Nothing to see', max_length=2000)),
                ('banner', models.URLField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('rating', models.FloatField(default=0.0)),
                ('submit_on_leave', models.BooleanField(default=False)),
                ('allow_calculator', models.BooleanField(default=False)),
                ('allow_word_search', models.BooleanField(default=False)),
                ('allow_robot_read', models.BooleanField(default=False)),
                ('instructions', models.TextField(default='Nothing to see', max_length=3000)),
                ('result_display_type', models.TextField(choices=[('on_submit', 'ON_SUBMIT'), ('on_complete', 'ON_COMPLETE'), ('mark_by_teacher', 'MARK_BY_TEACHER')], default='on_complete', max_length=20)),
                ('allow_retake', models.BooleanField(blank=True, default=False, null=True)),
                ('finish_message', models.CharField(blank=True, max_length=200, null=True)),
                ('allowed_users', models.TextField(choices=[('authenticated_users', 'AUTHENTICATED_USERS'), ('only_my_students', 'ONLY_MY_STUDENTS'), ('all', 'ALL')], default='all', max_length=20)),
                ('expected_xp', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(default=False)),
                ('is_ai_generated', models.BooleanField(default=False)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.category')),
                ('host', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.teachersaccount')),
                ('participants', models.ManyToManyField(blank=True, to='base.studentaccount')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz'),
        ),
        migrations.CreateModel(
            name='AttemptedQuizByAnonymousUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_completed', models.BooleanField(default=False)),
                ('user_answer', models.CharField(blank=True, max_length=300, null=True)),
                ('xp_earn', models.PositiveIntegerField(default=0)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('anonymous_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.anonymoususer')),
                ('questions_attempted', models.ManyToManyField(to='quiz.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
            ],
        ),
        migrations.AddField(
            model_name='anonymoususer',
            name='completed_quiz',
            field=models.ManyToManyField(blank=True, to='quiz.quiz'),
        ),
        migrations.CreateModel(
            name='QuizAccessToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.CharField(max_length=20)),
                ('expiration_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('max_usage', models.PositiveIntegerField(default=50)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('users', models.JSONField(default=list)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='QuizComments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=300)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('likes', models.ManyToManyField(related_name='comment_likes', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QuizSavedByUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.studentaccount')),
            ],
        ),
        migrations.CreateModel(
            name='QuizScoreBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('corrections', models.JSONField(blank=True, default=list, null=True)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('questions_answered', models.PositiveIntegerField(default=0)),
                ('xp_earn', models.PositiveIntegerField(default=0)),
                ('expected_xp', models.PositiveIntegerField(default=0)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.studentaccount')),
            ],
        ),
        migrations.CreateModel(
            name='QuizzesAttemptedByUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('is_completed', models.BooleanField(default=False)),
                ('xp_earn', models.IntegerField(default=0)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('questions_attempted', models.ManyToManyField(related_name='attempted_questions', to='quiz.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
                ('student', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='base.studentaccount')),
            ],
        ),
        migrations.CreateModel(
            name='ReportsOnQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report', models.TextField(max_length=250)),
                ('notification_sent_to_host', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserAnswerForQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.UUIDField()),
                ('answer', models.JSONField(default=list)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='quiz.quiz')),
            ],
        ),
    ]
