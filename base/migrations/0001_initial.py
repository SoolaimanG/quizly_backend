# Generated by Django 5.0.4 on 2024-04-23 14:48

import base.helpers
import base.models
import datetime
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AnonymousUser',
            fields=[
                ('anonymous_id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('xp', models.PositiveIntegerField(default=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('body', models.CharField(default='', max_length=50, unique=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_type', models.TextField(choices=[('true_or_false', 'TRUE_OR_FALSE'), ('objective', 'OBJECTIVE'), ('german', 'GERMAN'), ('multiple_choices', 'MULTIPLE_CHOICES')], default='objective')),
                ('answer_is_true', models.BooleanField(default=False)),
                ('answer', models.TextField(blank=True, max_length=255, null=True)),
                ('is_compulsary', models.BooleanField(default=False)),
                ('question_point', models.PositiveIntegerField(default=5)),
                ('correct_answer_explanation', models.CharField(max_length=300)),
                ('incorrect_answer_penalty', models.PositiveIntegerField(default=5)),
                ('hint', models.TextField(blank=True, default='No available hint.', max_length=250, null=True)),
                ('question_number', models.PositiveIntegerField(default=1)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('question_body', models.TextField(default=None, max_length=400)),
                ('question_image', models.URLField(blank=True, null=True)),
                ('mistakes_to_ignore', models.IntegerField(default=0)),
                ('is_strict', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='UploadImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=base.helpers.upload_to)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('account_type', models.CharField(choices=[('S', 'student'), ('T', 'teacher')], default='S', max_length=20)),
                ('age', models.IntegerField(blank=True, null=True)),
                ('auth_provider', models.CharField(choices=[('L', 'local'), ('G', 'google'), ('T', 'twitter')], default='L', max_length=30)),
                ('bio', models.TextField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(error_messages='User with this email already exists', max_length=100, unique=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('profile_image', models.URLField(blank=True, null=True)),
                ('username', models.CharField(error_messages='User with this username already exists', max_length=100, unique=True)),
                ('first_time_login', models.BooleanField(default=True)),
                ('email_verified', models.BooleanField(default=False)),
                ('signup_complete', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', base.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailVerification',
            fields=[
                ('expires', models.DateTimeField(default=datetime.datetime(2024, 4, 23, 15, 13, 57, 983442, tzinfo=datetime.timezone.utc))),
                ('verify_token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('number_of_requests', models.IntegerField(default=1)),
                ('next_request', models.DateTimeField(default=datetime.datetime(2024, 4, 23, 14, 58, 57, 983442, tzinfo=datetime.timezone.utc))),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='FeatureWaitList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature_name', models.CharField(choices=[('IMAGE_FILTER', 'IMAGE_FILTER'), ('AI_HELP', 'AI_HELP'), ('QuestionGroup', 'QuestionGroup'), ('Time', 'Time'), ('SET_RESPONSE_LIMIT', 'SET_RESPONSE_LIMIT')], max_length=50)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ForgetPassword',
            fields=[
                ('expires_by', models.DateTimeField(default=datetime.datetime(2024, 4, 23, 15, 13, 57, 983442, tzinfo=datetime.timezone.utc))),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, unique=True)),
                ('number_of_request', models.IntegerField(default=1)),
                ('otp', models.CharField(max_length=5)),
                ('next_request', models.DateTimeField(default=datetime.datetime(2024, 4, 23, 14, 49, 27, 983442, tzinfo=datetime.timezone.utc))),
                ('requested_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Logs',
            fields=[
                ('statement', models.TextField(blank=True, max_length=150, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ObjectiveOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField(blank=True, max_length=200, null=True)),
                ('is_correct_answer', models.BooleanField(default=False)),
                ('image_url', models.URLField(blank=True, null=True)),
                ('belongs_to', models.ForeignKey(db_column='belongs_to_id', default=None, on_delete=django.db.models.deletion.CASCADE, to='base.question')),
            ],
        ),
        migrations.CreateModel(
            name='GermanOptions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_strict', models.BooleanField(default=False)),
                ('mistakes_to_ignore', models.IntegerField(default=1)),
                ('belongs_to', models.ForeignKey(db_column='belongs_to_id', default=None, on_delete=django.db.models.deletion.CASCADE, to='base.question')),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('access_with_key', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('descriptions', models.TextField(default='Nothing to see', max_length=2000)),
                ('difficulty', models.TextField(choices=[('easy', 'EASY'), ('medium', 'MEDIUM'), ('hard', 'HARD')], default='medium', max_length=10)),
                ('time_limit', models.PositiveIntegerField(default=0)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('requirements', models.TextField(default='Nothing to see', max_length=2000)),
                ('banner', models.URLField(blank=True, null=True)),
                ('title', models.CharField(blank=True, max_length=100, null=True)),
                ('rating', models.FloatField(default=0.0)),
                ('submit_on_leave', models.BooleanField(default=False)),
                ('allow_calculator', models.BooleanField(default=False)),
                ('allow_word_search', models.BooleanField(default=False)),
                ('allow_robot_read', models.BooleanField(default=False)),
                ('instructions', models.TextField(default='Nothing to see', max_length=3000)),
                ('result_display_type', models.TextField(choices=[('on_submit', 'ON_SUBMIT'), ('on_complete', 'ON_COMPLETE'), ('mark_by_teacher', 'MARK_BY_TEACHER')], default='on_complete', max_length=20)),
                ('allow_retake', models.BooleanField(blank=True, default=False, null=True)),
                ('finish_message', models.CharField(blank=True, max_length=200, null=True)),
                ('allowed_users', models.TextField(choices=[('authenticated_users', 'AUTHENTICATED_USERS'), ('only_my_students', 'ONLY_MY_STUDENTS'), ('all', 'ALL')], default='all', max_length=20)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.category')),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='quiz_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz'),
        ),
        migrations.CreateModel(
            name='Notifications',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('message', models.CharField(max_length=500)),
                ('path', models.URLField(blank=True, null=True)),
                ('notification_type', models.CharField(choices=[('default', 'DEFAULT'), ('community_request', 'COMMUNITY_REQUEST'), ('new_quiz_alert', 'NEW_QUIZ_ALERT'), ('achievement', 'ACHIEVEMENT')], default='default', max_length=30)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('user_requesting', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_requesting', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quiz', to='base.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='Comments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.CharField(max_length=300)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('likes', models.ManyToManyField(related_name='comment_likes', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='AttemptedQuizByAnonymousUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_answer', models.CharField(blank=True, max_length=300, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('xp_earn', models.PositiveIntegerField(default=0)),
                ('attempted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.anonymoususer')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
            ],
        ),
        migrations.AddField(
            model_name='anonymoususer',
            name='completed_quiz',
            field=models.ManyToManyField(blank=True, to='base.quiz'),
        ),
        migrations.CreateModel(
            name='QuizAccessToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.CharField(max_length=20)),
                ('should_expire', models.BooleanField(default=False)),
                ('expiration_time', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('number_of_usage', models.PositiveIntegerField(default=50)),
                ('usage', models.PositiveIntegerField(default=0)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='QuizReports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue', models.TextField(max_length=250)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SavedQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentAccount',
            fields=[
                ('streaks_count', models.IntegerField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('difficulty', models.CharField(choices=[('all', 'All'), ('easy', 'EASY'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=10)),
                ('xp', models.IntegerField(default=0)),
                ('favourites', models.ManyToManyField(blank=True, to='base.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ScoreBoard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField(default=0)),
                ('xp_earn', models.PositiveIntegerField(default=0)),
                ('wrong_answers', models.PositiveIntegerField(default=0)),
                ('corrections', models.JSONField(blank=True, default=list, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('attempted_question', models.PositiveIntegerField(default=0)),
                ('feedback', models.TextField(blank=True, null=True)),
                ('total_question', models.PositiveIntegerField(blank=True, null=True)),
                ('expected_xp', models.PositiveIntegerField(default=0)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.studentaccount')),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='participants',
            field=models.ManyToManyField(blank=True, to='base.studentaccount'),
        ),
        migrations.CreateModel(
            name='AttemptedQuizOfUser',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('last_accessed_time', models.DateTimeField(auto_now=True, null=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('current_question_index', models.PositiveIntegerField(default=0)),
                ('answers', models.JSONField(blank=True, default=list, null=True)),
                ('XP', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('questions_answered_by_student', models.ManyToManyField(related_name='attempted_quizzes', to='base.question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
                ('attempted_by', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='base.studentaccount')),
            ],
        ),
        migrations.CreateModel(
            name='TeachersAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.FloatField(default=0.5)),
                ('educational_level', models.TextField(choices=[('masters', 'MASTERS'), ('doctorate', 'DOCTORATE'), ('bachelor', 'BACHELOR')], default='bachelor', max_length=15)),
                ('phone_num', models.CharField(blank=True, max_length=15, null=True)),
                ('whatsapp_link', models.URLField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=200, null=True)),
                ('quizzes', models.ManyToManyField(blank=True, to='base.quiz')),
                ('specializations', models.ManyToManyField(blank=True, to='base.category')),
                ('students', models.ManyToManyField(blank=True, related_name='my_students', to='base.studentaccount')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='studentaccount',
            name='my_teachers',
            field=models.ManyToManyField(blank=True, related_name='user_teachers', to='base.teachersaccount'),
        ),
        migrations.CreateModel(
            name='Ratings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(choices=[('teacher', 'TEACHER'), ('quiz', 'QUIZ')], default='quiz', max_length=10)),
                ('quiz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('teacher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='base.teachersaccount')),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='host',
            field=models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='base.teachersaccount'),
        ),
    ]
